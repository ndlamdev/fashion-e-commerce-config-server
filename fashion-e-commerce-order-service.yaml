server:
  servlet:
    context-path: /api
  port: 8007
spring:
  kafka:
    bootstrap-servers: ${KAFKA_SERVER:localhost:9092}
    topic:
      delete-cart-items: delete-cart-items
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: "delete_cart_items:com.lamnguyen.order_service.event.DeleteCartItemsEvent"
    # consumer:
    #   group-id: order-service
    #   key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    #   value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    #   properties:
    #     spring:
    #       json:
    #         trusted:
    #           packages: "save_user_detail"
    #         type:
    #           mapping: "save_profile:com.lamnguyen.profile_service.message.SaveProfileUserMessage,update_avatar_user:com.lamnguyen.profile_service.message.UpdateAvatarUserMessage"
  
  application:
    name: fashion-e-commerce-order-service
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: ${HIBERNATE_FORMAT_SQL:true}
  flyway:
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    schemas: ${application.database}
    url: ${spring.datasource.url}
    locations: classpath:db/migration
  jackson:
    mapper:
      sort-properties-alphabetically: false

application:
  white-list:
    - /actuator/**
    - /order-service/greeting
    - /order/v1/cancel
    - /order/v1/pay-success
    
grpc:
  server:
    port: ${GRPC_PORT:8107}
  client:
    fashion-e-commerce-product-service:
      enableKeepAlive: true
      negotiationType: plaintext
    fashion-e-commerce-inventory-service:
      enableKeepAlive: true
      negotiationType: plaintext
    fashion-e-commerce-payment-service:
      enableKeepAlive: true
      negotiationType: plaintext
